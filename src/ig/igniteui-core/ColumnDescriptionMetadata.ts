/* 
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE: 
https://www.infragistics.com/legal/license/igultimate-la 
https://www.infragistics.com/legal/license/igultimate-eula 
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

import { Base, String_$type, Type, markType } from "./type";
import { TypeDescriptionContext } from "./TypeDescriptionContext";
import { Dictionary$2 } from "./Dictionary$2";
import { GridColumnAnimationSettingsDescriptionMetadata } from "./GridColumnAnimationSettingsDescriptionMetadata";
import { ColumnWidthDescriptionMetadata } from "./ColumnWidthDescriptionMetadata";
import { ColumnFilterConditionDescriptionMetadata } from "./ColumnFilterConditionDescriptionMetadata";
import { HeaderDescriptionMetadata } from "./HeaderDescriptionMetadata";
import { DefinitionBaseDescriptionMetadata } from "./DefinitionBaseDescriptionMetadata";

/**
 * @hidden 
 */
export class ColumnDescriptionMetadata extends Base {
	static $t: Type = markType(ColumnDescriptionMetadata, 'ColumnDescriptionMetadata');
	private static _metadata: Dictionary$2<string, string> = null;
	private static ensureMetadata(context: TypeDescriptionContext): void {
		if (ColumnDescriptionMetadata._metadata == null) {
			ColumnDescriptionMetadata._metadata = new Dictionary$2<string, string>(String_$type, String_$type, 0);
			ColumnDescriptionMetadata.fillMetadata(context, ColumnDescriptionMetadata._metadata);
			GridColumnAnimationSettingsDescriptionMetadata.register(context);
			ColumnWidthDescriptionMetadata.register(context);
			ColumnFilterConditionDescriptionMetadata.register(context);
			HeaderDescriptionMetadata.register(context);
		}
	}
	static fillMetadata(context: TypeDescriptionContext, metadata: Dictionary$2<string, string>): void {
		DefinitionBaseDescriptionMetadata.fillMetadata(context, metadata);
		metadata.item("PaddingLeft", "Number:int");
		metadata.item("PaddingTop", "Number:int");
		metadata.item("PaddingRight", "Number:int");
		metadata.item("PaddingBottom", "Number:int");
		metadata.item("Name", "String");
		metadata.item("PropertyPath", "String");
		metadata.item("HeaderText", "String");
		metadata.item("ActualHeaderText", "String");
		metadata.item("SelectedBackground", "Brush");
		metadata.item("ActualSelectedBackground", "Brush");
		metadata.item("AnimationSettings", "ExportedType:GridColumnAnimationSettings");
		metadata.item("Width", "ExportedType:ColumnWidth");
		metadata.item("MinWidth", "Number:double");
		metadata.item("IsFromMarkup", "Boolean");
		metadata.item("IsAutoGenerated", "Boolean");
		metadata.item("Filter", "ExportedType:ColumnFilterCondition");
		metadata.item("Header", "ExportedType:Header");
		metadata.item("IsFilteringEnabled", "Boolean");
		metadata.item("IsResizingEnabled", "Boolean");
		metadata.item("IsHidden", "Boolean");
		metadata.item("ShouldRemoveWhenHidden", "Boolean");
		metadata.item("SortDirection", "ExportedType:string:ColumnSortDirection");
		metadata.item("Pinned", "ExportedType:string:PinnedPositions");
	}
	static register(context: TypeDescriptionContext): void {
		ColumnDescriptionMetadata.ensureMetadata(context);
		context.register("Column", ColumnDescriptionMetadata._metadata);
	}
}


